
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `UserSession` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model UserSession
 * 
 */
export type UserSessionModel = runtime.Types.Result.DefaultSelection<Prisma.$UserSessionPayload>

export type AggregateUserSession = {
  _count: UserSessionCountAggregateOutputType | null
  _avg: UserSessionAvgAggregateOutputType | null
  _sum: UserSessionSumAggregateOutputType | null
  _min: UserSessionMinAggregateOutputType | null
  _max: UserSessionMaxAggregateOutputType | null
}

export type UserSessionAvgAggregateOutputType = {
  id: number | null
  userId: number | null
}

export type UserSessionSumAggregateOutputType = {
  id: number | null
  userId: number | null
}

export type UserSessionMinAggregateOutputType = {
  id: number | null
  userId: number | null
  token: string | null
  active: boolean | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type UserSessionMaxAggregateOutputType = {
  id: number | null
  userId: number | null
  token: string | null
  active: boolean | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type UserSessionCountAggregateOutputType = {
  id: number
  userId: number
  token: number
  active: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type UserSessionAvgAggregateInputType = {
  id?: true
  userId?: true
}

export type UserSessionSumAggregateInputType = {
  id?: true
  userId?: true
}

export type UserSessionMinAggregateInputType = {
  id?: true
  userId?: true
  token?: true
  active?: true
  createdAt?: true
  updatedAt?: true
}

export type UserSessionMaxAggregateInputType = {
  id?: true
  userId?: true
  token?: true
  active?: true
  createdAt?: true
  updatedAt?: true
}

export type UserSessionCountAggregateInputType = {
  id?: true
  userId?: true
  token?: true
  active?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type UserSessionAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which UserSession to aggregate.
   */
  where?: Prisma.UserSessionWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of UserSessions to fetch.
   */
  orderBy?: Prisma.UserSessionOrderByWithRelationInput | Prisma.UserSessionOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.UserSessionWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` UserSessions from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` UserSessions.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned UserSessions
  **/
  _count?: true | UserSessionCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: UserSessionAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: UserSessionSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: UserSessionMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: UserSessionMaxAggregateInputType
}

export type GetUserSessionAggregateType<T extends UserSessionAggregateArgs> = {
      [P in keyof T & keyof AggregateUserSession]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateUserSession[P]>
    : Prisma.GetScalarType<T[P], AggregateUserSession[P]>
}




export type UserSessionGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.UserSessionWhereInput
  orderBy?: Prisma.UserSessionOrderByWithAggregationInput | Prisma.UserSessionOrderByWithAggregationInput[]
  by: Prisma.UserSessionScalarFieldEnum[] | Prisma.UserSessionScalarFieldEnum
  having?: Prisma.UserSessionScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: UserSessionCountAggregateInputType | true
  _avg?: UserSessionAvgAggregateInputType
  _sum?: UserSessionSumAggregateInputType
  _min?: UserSessionMinAggregateInputType
  _max?: UserSessionMaxAggregateInputType
}

export type UserSessionGroupByOutputType = {
  id: number
  userId: number
  token: string
  active: boolean
  createdAt: Date
  updatedAt: Date
  _count: UserSessionCountAggregateOutputType | null
  _avg: UserSessionAvgAggregateOutputType | null
  _sum: UserSessionSumAggregateOutputType | null
  _min: UserSessionMinAggregateOutputType | null
  _max: UserSessionMaxAggregateOutputType | null
}

type GetUserSessionGroupByPayload<T extends UserSessionGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<UserSessionGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof UserSessionGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], UserSessionGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], UserSessionGroupByOutputType[P]>
      }
    >
  >



export type UserSessionWhereInput = {
  AND?: Prisma.UserSessionWhereInput | Prisma.UserSessionWhereInput[]
  OR?: Prisma.UserSessionWhereInput[]
  NOT?: Prisma.UserSessionWhereInput | Prisma.UserSessionWhereInput[]
  id?: Prisma.IntFilter<"UserSession"> | number
  userId?: Prisma.IntFilter<"UserSession"> | number
  token?: Prisma.StringFilter<"UserSession"> | string
  active?: Prisma.BoolFilter<"UserSession"> | boolean
  createdAt?: Prisma.DateTimeFilter<"UserSession"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"UserSession"> | Date | string
  user?: Prisma.XOR<Prisma.UserCredScalarRelationFilter, Prisma.UserCredWhereInput>
}

export type UserSessionOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  token?: Prisma.SortOrder
  active?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  user?: Prisma.UserCredOrderByWithRelationInput
  _relevance?: Prisma.UserSessionOrderByRelevanceInput
}

export type UserSessionWhereUniqueInput = Prisma.AtLeast<{
  id?: number
  token?: string
  AND?: Prisma.UserSessionWhereInput | Prisma.UserSessionWhereInput[]
  OR?: Prisma.UserSessionWhereInput[]
  NOT?: Prisma.UserSessionWhereInput | Prisma.UserSessionWhereInput[]
  userId?: Prisma.IntFilter<"UserSession"> | number
  active?: Prisma.BoolFilter<"UserSession"> | boolean
  createdAt?: Prisma.DateTimeFilter<"UserSession"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"UserSession"> | Date | string
  user?: Prisma.XOR<Prisma.UserCredScalarRelationFilter, Prisma.UserCredWhereInput>
}, "id" | "token">

export type UserSessionOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  token?: Prisma.SortOrder
  active?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.UserSessionCountOrderByAggregateInput
  _avg?: Prisma.UserSessionAvgOrderByAggregateInput
  _max?: Prisma.UserSessionMaxOrderByAggregateInput
  _min?: Prisma.UserSessionMinOrderByAggregateInput
  _sum?: Prisma.UserSessionSumOrderByAggregateInput
}

export type UserSessionScalarWhereWithAggregatesInput = {
  AND?: Prisma.UserSessionScalarWhereWithAggregatesInput | Prisma.UserSessionScalarWhereWithAggregatesInput[]
  OR?: Prisma.UserSessionScalarWhereWithAggregatesInput[]
  NOT?: Prisma.UserSessionScalarWhereWithAggregatesInput | Prisma.UserSessionScalarWhereWithAggregatesInput[]
  id?: Prisma.IntWithAggregatesFilter<"UserSession"> | number
  userId?: Prisma.IntWithAggregatesFilter<"UserSession"> | number
  token?: Prisma.StringWithAggregatesFilter<"UserSession"> | string
  active?: Prisma.BoolWithAggregatesFilter<"UserSession"> | boolean
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"UserSession"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"UserSession"> | Date | string
}

export type UserSessionCreateInput = {
  token: string
  active?: boolean
  createdAt?: Date | string
  updatedAt?: Date | string
  user: Prisma.UserCredCreateNestedOneWithoutUserSessionInput
}

export type UserSessionUncheckedCreateInput = {
  id?: number
  userId: number
  token: string
  active?: boolean
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type UserSessionUpdateInput = {
  token?: Prisma.StringFieldUpdateOperationsInput | string
  active?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  user?: Prisma.UserCredUpdateOneRequiredWithoutUserSessionNestedInput
}

export type UserSessionUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  userId?: Prisma.IntFieldUpdateOperationsInput | number
  token?: Prisma.StringFieldUpdateOperationsInput | string
  active?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type UserSessionCreateManyInput = {
  id?: number
  userId: number
  token: string
  active?: boolean
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type UserSessionUpdateManyMutationInput = {
  token?: Prisma.StringFieldUpdateOperationsInput | string
  active?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type UserSessionUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  userId?: Prisma.IntFieldUpdateOperationsInput | number
  token?: Prisma.StringFieldUpdateOperationsInput | string
  active?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type UserSessionListRelationFilter = {
  every?: Prisma.UserSessionWhereInput
  some?: Prisma.UserSessionWhereInput
  none?: Prisma.UserSessionWhereInput
}

export type UserSessionOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type UserSessionOrderByRelevanceInput = {
  fields: Prisma.UserSessionOrderByRelevanceFieldEnum | Prisma.UserSessionOrderByRelevanceFieldEnum[]
  sort: Prisma.SortOrder
  search: string
}

export type UserSessionCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  token?: Prisma.SortOrder
  active?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type UserSessionAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
}

export type UserSessionMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  token?: Prisma.SortOrder
  active?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type UserSessionMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  token?: Prisma.SortOrder
  active?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type UserSessionSumOrderByAggregateInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
}

export type UserSessionCreateNestedManyWithoutUserInput = {
  create?: Prisma.XOR<Prisma.UserSessionCreateWithoutUserInput, Prisma.UserSessionUncheckedCreateWithoutUserInput> | Prisma.UserSessionCreateWithoutUserInput[] | Prisma.UserSessionUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.UserSessionCreateOrConnectWithoutUserInput | Prisma.UserSessionCreateOrConnectWithoutUserInput[]
  createMany?: Prisma.UserSessionCreateManyUserInputEnvelope
  connect?: Prisma.UserSessionWhereUniqueInput | Prisma.UserSessionWhereUniqueInput[]
}

export type UserSessionUncheckedCreateNestedManyWithoutUserInput = {
  create?: Prisma.XOR<Prisma.UserSessionCreateWithoutUserInput, Prisma.UserSessionUncheckedCreateWithoutUserInput> | Prisma.UserSessionCreateWithoutUserInput[] | Prisma.UserSessionUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.UserSessionCreateOrConnectWithoutUserInput | Prisma.UserSessionCreateOrConnectWithoutUserInput[]
  createMany?: Prisma.UserSessionCreateManyUserInputEnvelope
  connect?: Prisma.UserSessionWhereUniqueInput | Prisma.UserSessionWhereUniqueInput[]
}

export type UserSessionUpdateManyWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.UserSessionCreateWithoutUserInput, Prisma.UserSessionUncheckedCreateWithoutUserInput> | Prisma.UserSessionCreateWithoutUserInput[] | Prisma.UserSessionUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.UserSessionCreateOrConnectWithoutUserInput | Prisma.UserSessionCreateOrConnectWithoutUserInput[]
  upsert?: Prisma.UserSessionUpsertWithWhereUniqueWithoutUserInput | Prisma.UserSessionUpsertWithWhereUniqueWithoutUserInput[]
  createMany?: Prisma.UserSessionCreateManyUserInputEnvelope
  set?: Prisma.UserSessionWhereUniqueInput | Prisma.UserSessionWhereUniqueInput[]
  disconnect?: Prisma.UserSessionWhereUniqueInput | Prisma.UserSessionWhereUniqueInput[]
  delete?: Prisma.UserSessionWhereUniqueInput | Prisma.UserSessionWhereUniqueInput[]
  connect?: Prisma.UserSessionWhereUniqueInput | Prisma.UserSessionWhereUniqueInput[]
  update?: Prisma.UserSessionUpdateWithWhereUniqueWithoutUserInput | Prisma.UserSessionUpdateWithWhereUniqueWithoutUserInput[]
  updateMany?: Prisma.UserSessionUpdateManyWithWhereWithoutUserInput | Prisma.UserSessionUpdateManyWithWhereWithoutUserInput[]
  deleteMany?: Prisma.UserSessionScalarWhereInput | Prisma.UserSessionScalarWhereInput[]
}

export type UserSessionUncheckedUpdateManyWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.UserSessionCreateWithoutUserInput, Prisma.UserSessionUncheckedCreateWithoutUserInput> | Prisma.UserSessionCreateWithoutUserInput[] | Prisma.UserSessionUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.UserSessionCreateOrConnectWithoutUserInput | Prisma.UserSessionCreateOrConnectWithoutUserInput[]
  upsert?: Prisma.UserSessionUpsertWithWhereUniqueWithoutUserInput | Prisma.UserSessionUpsertWithWhereUniqueWithoutUserInput[]
  createMany?: Prisma.UserSessionCreateManyUserInputEnvelope
  set?: Prisma.UserSessionWhereUniqueInput | Prisma.UserSessionWhereUniqueInput[]
  disconnect?: Prisma.UserSessionWhereUniqueInput | Prisma.UserSessionWhereUniqueInput[]
  delete?: Prisma.UserSessionWhereUniqueInput | Prisma.UserSessionWhereUniqueInput[]
  connect?: Prisma.UserSessionWhereUniqueInput | Prisma.UserSessionWhereUniqueInput[]
  update?: Prisma.UserSessionUpdateWithWhereUniqueWithoutUserInput | Prisma.UserSessionUpdateWithWhereUniqueWithoutUserInput[]
  updateMany?: Prisma.UserSessionUpdateManyWithWhereWithoutUserInput | Prisma.UserSessionUpdateManyWithWhereWithoutUserInput[]
  deleteMany?: Prisma.UserSessionScalarWhereInput | Prisma.UserSessionScalarWhereInput[]
}

export type BoolFieldUpdateOperationsInput = {
  set?: boolean
}

export type UserSessionCreateWithoutUserInput = {
  token: string
  active?: boolean
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type UserSessionUncheckedCreateWithoutUserInput = {
  id?: number
  token: string
  active?: boolean
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type UserSessionCreateOrConnectWithoutUserInput = {
  where: Prisma.UserSessionWhereUniqueInput
  create: Prisma.XOR<Prisma.UserSessionCreateWithoutUserInput, Prisma.UserSessionUncheckedCreateWithoutUserInput>
}

export type UserSessionCreateManyUserInputEnvelope = {
  data: Prisma.UserSessionCreateManyUserInput | Prisma.UserSessionCreateManyUserInput[]
  skipDuplicates?: boolean
}

export type UserSessionUpsertWithWhereUniqueWithoutUserInput = {
  where: Prisma.UserSessionWhereUniqueInput
  update: Prisma.XOR<Prisma.UserSessionUpdateWithoutUserInput, Prisma.UserSessionUncheckedUpdateWithoutUserInput>
  create: Prisma.XOR<Prisma.UserSessionCreateWithoutUserInput, Prisma.UserSessionUncheckedCreateWithoutUserInput>
}

export type UserSessionUpdateWithWhereUniqueWithoutUserInput = {
  where: Prisma.UserSessionWhereUniqueInput
  data: Prisma.XOR<Prisma.UserSessionUpdateWithoutUserInput, Prisma.UserSessionUncheckedUpdateWithoutUserInput>
}

export type UserSessionUpdateManyWithWhereWithoutUserInput = {
  where: Prisma.UserSessionScalarWhereInput
  data: Prisma.XOR<Prisma.UserSessionUpdateManyMutationInput, Prisma.UserSessionUncheckedUpdateManyWithoutUserInput>
}

export type UserSessionScalarWhereInput = {
  AND?: Prisma.UserSessionScalarWhereInput | Prisma.UserSessionScalarWhereInput[]
  OR?: Prisma.UserSessionScalarWhereInput[]
  NOT?: Prisma.UserSessionScalarWhereInput | Prisma.UserSessionScalarWhereInput[]
  id?: Prisma.IntFilter<"UserSession"> | number
  userId?: Prisma.IntFilter<"UserSession"> | number
  token?: Prisma.StringFilter<"UserSession"> | string
  active?: Prisma.BoolFilter<"UserSession"> | boolean
  createdAt?: Prisma.DateTimeFilter<"UserSession"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"UserSession"> | Date | string
}

export type UserSessionCreateManyUserInput = {
  id?: number
  token: string
  active?: boolean
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type UserSessionUpdateWithoutUserInput = {
  token?: Prisma.StringFieldUpdateOperationsInput | string
  active?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type UserSessionUncheckedUpdateWithoutUserInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  token?: Prisma.StringFieldUpdateOperationsInput | string
  active?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type UserSessionUncheckedUpdateManyWithoutUserInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  token?: Prisma.StringFieldUpdateOperationsInput | string
  active?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}



export type UserSessionSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  userId?: boolean
  token?: boolean
  active?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  user?: boolean | Prisma.UserCredDefaultArgs<ExtArgs>
}, ExtArgs["result"]["userSession"]>



export type UserSessionSelectScalar = {
  id?: boolean
  userId?: boolean
  token?: boolean
  active?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type UserSessionOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "userId" | "token" | "active" | "createdAt" | "updatedAt", ExtArgs["result"]["userSession"]>
export type UserSessionInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.UserCredDefaultArgs<ExtArgs>
}

export type $UserSessionPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "UserSession"
  objects: {
    user: Prisma.$UserCredPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: number
    userId: number
    token: string
    active: boolean
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["userSession"]>
  composites: {}
}

export type UserSessionGetPayload<S extends boolean | null | undefined | UserSessionDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$UserSessionPayload, S>

export type UserSessionCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<UserSessionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: UserSessionCountAggregateInputType | true
  }

export interface UserSessionDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UserSession'], meta: { name: 'UserSession' } }
  /**
   * Find zero or one UserSession that matches the filter.
   * @param {UserSessionFindUniqueArgs} args - Arguments to find a UserSession
   * @example
   * // Get one UserSession
   * const userSession = await prisma.userSession.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends UserSessionFindUniqueArgs>(args: Prisma.SelectSubset<T, UserSessionFindUniqueArgs<ExtArgs>>): Prisma.Prisma__UserSessionClient<runtime.Types.Result.GetResult<Prisma.$UserSessionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one UserSession that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {UserSessionFindUniqueOrThrowArgs} args - Arguments to find a UserSession
   * @example
   * // Get one UserSession
   * const userSession = await prisma.userSession.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends UserSessionFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, UserSessionFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__UserSessionClient<runtime.Types.Result.GetResult<Prisma.$UserSessionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first UserSession that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserSessionFindFirstArgs} args - Arguments to find a UserSession
   * @example
   * // Get one UserSession
   * const userSession = await prisma.userSession.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends UserSessionFindFirstArgs>(args?: Prisma.SelectSubset<T, UserSessionFindFirstArgs<ExtArgs>>): Prisma.Prisma__UserSessionClient<runtime.Types.Result.GetResult<Prisma.$UserSessionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first UserSession that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserSessionFindFirstOrThrowArgs} args - Arguments to find a UserSession
   * @example
   * // Get one UserSession
   * const userSession = await prisma.userSession.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends UserSessionFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, UserSessionFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__UserSessionClient<runtime.Types.Result.GetResult<Prisma.$UserSessionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more UserSessions that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserSessionFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all UserSessions
   * const userSessions = await prisma.userSession.findMany()
   * 
   * // Get first 10 UserSessions
   * const userSessions = await prisma.userSession.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const userSessionWithIdOnly = await prisma.userSession.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends UserSessionFindManyArgs>(args?: Prisma.SelectSubset<T, UserSessionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$UserSessionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a UserSession.
   * @param {UserSessionCreateArgs} args - Arguments to create a UserSession.
   * @example
   * // Create one UserSession
   * const UserSession = await prisma.userSession.create({
   *   data: {
   *     // ... data to create a UserSession
   *   }
   * })
   * 
   */
  create<T extends UserSessionCreateArgs>(args: Prisma.SelectSubset<T, UserSessionCreateArgs<ExtArgs>>): Prisma.Prisma__UserSessionClient<runtime.Types.Result.GetResult<Prisma.$UserSessionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many UserSessions.
   * @param {UserSessionCreateManyArgs} args - Arguments to create many UserSessions.
   * @example
   * // Create many UserSessions
   * const userSession = await prisma.userSession.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends UserSessionCreateManyArgs>(args?: Prisma.SelectSubset<T, UserSessionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Delete a UserSession.
   * @param {UserSessionDeleteArgs} args - Arguments to delete one UserSession.
   * @example
   * // Delete one UserSession
   * const UserSession = await prisma.userSession.delete({
   *   where: {
   *     // ... filter to delete one UserSession
   *   }
   * })
   * 
   */
  delete<T extends UserSessionDeleteArgs>(args: Prisma.SelectSubset<T, UserSessionDeleteArgs<ExtArgs>>): Prisma.Prisma__UserSessionClient<runtime.Types.Result.GetResult<Prisma.$UserSessionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one UserSession.
   * @param {UserSessionUpdateArgs} args - Arguments to update one UserSession.
   * @example
   * // Update one UserSession
   * const userSession = await prisma.userSession.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends UserSessionUpdateArgs>(args: Prisma.SelectSubset<T, UserSessionUpdateArgs<ExtArgs>>): Prisma.Prisma__UserSessionClient<runtime.Types.Result.GetResult<Prisma.$UserSessionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more UserSessions.
   * @param {UserSessionDeleteManyArgs} args - Arguments to filter UserSessions to delete.
   * @example
   * // Delete a few UserSessions
   * const { count } = await prisma.userSession.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends UserSessionDeleteManyArgs>(args?: Prisma.SelectSubset<T, UserSessionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more UserSessions.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserSessionUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many UserSessions
   * const userSession = await prisma.userSession.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends UserSessionUpdateManyArgs>(args: Prisma.SelectSubset<T, UserSessionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create or update one UserSession.
   * @param {UserSessionUpsertArgs} args - Arguments to update or create a UserSession.
   * @example
   * // Update or create a UserSession
   * const userSession = await prisma.userSession.upsert({
   *   create: {
   *     // ... data to create a UserSession
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the UserSession we want to update
   *   }
   * })
   */
  upsert<T extends UserSessionUpsertArgs>(args: Prisma.SelectSubset<T, UserSessionUpsertArgs<ExtArgs>>): Prisma.Prisma__UserSessionClient<runtime.Types.Result.GetResult<Prisma.$UserSessionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of UserSessions.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserSessionCountArgs} args - Arguments to filter UserSessions to count.
   * @example
   * // Count the number of UserSessions
   * const count = await prisma.userSession.count({
   *   where: {
   *     // ... the filter for the UserSessions we want to count
   *   }
   * })
  **/
  count<T extends UserSessionCountArgs>(
    args?: Prisma.Subset<T, UserSessionCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], UserSessionCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a UserSession.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserSessionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends UserSessionAggregateArgs>(args: Prisma.Subset<T, UserSessionAggregateArgs>): Prisma.PrismaPromise<GetUserSessionAggregateType<T>>

  /**
   * Group by UserSession.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserSessionGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends UserSessionGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: UserSessionGroupByArgs['orderBy'] }
      : { orderBy?: UserSessionGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, UserSessionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserSessionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the UserSession model
 */
readonly fields: UserSessionFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for UserSession.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__UserSessionClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  user<T extends Prisma.UserCredDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.UserCredDefaultArgs<ExtArgs>>): Prisma.Prisma__UserCredClient<runtime.Types.Result.GetResult<Prisma.$UserCredPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the UserSession model
 */
export interface UserSessionFieldRefs {
  readonly id: Prisma.FieldRef<"UserSession", 'Int'>
  readonly userId: Prisma.FieldRef<"UserSession", 'Int'>
  readonly token: Prisma.FieldRef<"UserSession", 'String'>
  readonly active: Prisma.FieldRef<"UserSession", 'Boolean'>
  readonly createdAt: Prisma.FieldRef<"UserSession", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"UserSession", 'DateTime'>
}
    

// Custom InputTypes
/**
 * UserSession findUnique
 */
export type UserSessionFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserSession
   */
  select?: Prisma.UserSessionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserSession
   */
  omit?: Prisma.UserSessionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserSessionInclude<ExtArgs> | null
  /**
   * Filter, which UserSession to fetch.
   */
  where: Prisma.UserSessionWhereUniqueInput
}

/**
 * UserSession findUniqueOrThrow
 */
export type UserSessionFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserSession
   */
  select?: Prisma.UserSessionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserSession
   */
  omit?: Prisma.UserSessionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserSessionInclude<ExtArgs> | null
  /**
   * Filter, which UserSession to fetch.
   */
  where: Prisma.UserSessionWhereUniqueInput
}

/**
 * UserSession findFirst
 */
export type UserSessionFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserSession
   */
  select?: Prisma.UserSessionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserSession
   */
  omit?: Prisma.UserSessionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserSessionInclude<ExtArgs> | null
  /**
   * Filter, which UserSession to fetch.
   */
  where?: Prisma.UserSessionWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of UserSessions to fetch.
   */
  orderBy?: Prisma.UserSessionOrderByWithRelationInput | Prisma.UserSessionOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for UserSessions.
   */
  cursor?: Prisma.UserSessionWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` UserSessions from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` UserSessions.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of UserSessions.
   */
  distinct?: Prisma.UserSessionScalarFieldEnum | Prisma.UserSessionScalarFieldEnum[]
}

/**
 * UserSession findFirstOrThrow
 */
export type UserSessionFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserSession
   */
  select?: Prisma.UserSessionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserSession
   */
  omit?: Prisma.UserSessionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserSessionInclude<ExtArgs> | null
  /**
   * Filter, which UserSession to fetch.
   */
  where?: Prisma.UserSessionWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of UserSessions to fetch.
   */
  orderBy?: Prisma.UserSessionOrderByWithRelationInput | Prisma.UserSessionOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for UserSessions.
   */
  cursor?: Prisma.UserSessionWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` UserSessions from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` UserSessions.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of UserSessions.
   */
  distinct?: Prisma.UserSessionScalarFieldEnum | Prisma.UserSessionScalarFieldEnum[]
}

/**
 * UserSession findMany
 */
export type UserSessionFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserSession
   */
  select?: Prisma.UserSessionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserSession
   */
  omit?: Prisma.UserSessionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserSessionInclude<ExtArgs> | null
  /**
   * Filter, which UserSessions to fetch.
   */
  where?: Prisma.UserSessionWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of UserSessions to fetch.
   */
  orderBy?: Prisma.UserSessionOrderByWithRelationInput | Prisma.UserSessionOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing UserSessions.
   */
  cursor?: Prisma.UserSessionWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` UserSessions from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` UserSessions.
   */
  skip?: number
  distinct?: Prisma.UserSessionScalarFieldEnum | Prisma.UserSessionScalarFieldEnum[]
}

/**
 * UserSession create
 */
export type UserSessionCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserSession
   */
  select?: Prisma.UserSessionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserSession
   */
  omit?: Prisma.UserSessionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserSessionInclude<ExtArgs> | null
  /**
   * The data needed to create a UserSession.
   */
  data: Prisma.XOR<Prisma.UserSessionCreateInput, Prisma.UserSessionUncheckedCreateInput>
}

/**
 * UserSession createMany
 */
export type UserSessionCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many UserSessions.
   */
  data: Prisma.UserSessionCreateManyInput | Prisma.UserSessionCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * UserSession update
 */
export type UserSessionUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserSession
   */
  select?: Prisma.UserSessionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserSession
   */
  omit?: Prisma.UserSessionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserSessionInclude<ExtArgs> | null
  /**
   * The data needed to update a UserSession.
   */
  data: Prisma.XOR<Prisma.UserSessionUpdateInput, Prisma.UserSessionUncheckedUpdateInput>
  /**
   * Choose, which UserSession to update.
   */
  where: Prisma.UserSessionWhereUniqueInput
}

/**
 * UserSession updateMany
 */
export type UserSessionUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update UserSessions.
   */
  data: Prisma.XOR<Prisma.UserSessionUpdateManyMutationInput, Prisma.UserSessionUncheckedUpdateManyInput>
  /**
   * Filter which UserSessions to update
   */
  where?: Prisma.UserSessionWhereInput
  /**
   * Limit how many UserSessions to update.
   */
  limit?: number
}

/**
 * UserSession upsert
 */
export type UserSessionUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserSession
   */
  select?: Prisma.UserSessionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserSession
   */
  omit?: Prisma.UserSessionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserSessionInclude<ExtArgs> | null
  /**
   * The filter to search for the UserSession to update in case it exists.
   */
  where: Prisma.UserSessionWhereUniqueInput
  /**
   * In case the UserSession found by the `where` argument doesn't exist, create a new UserSession with this data.
   */
  create: Prisma.XOR<Prisma.UserSessionCreateInput, Prisma.UserSessionUncheckedCreateInput>
  /**
   * In case the UserSession was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.UserSessionUpdateInput, Prisma.UserSessionUncheckedUpdateInput>
}

/**
 * UserSession delete
 */
export type UserSessionDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserSession
   */
  select?: Prisma.UserSessionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserSession
   */
  omit?: Prisma.UserSessionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserSessionInclude<ExtArgs> | null
  /**
   * Filter which UserSession to delete.
   */
  where: Prisma.UserSessionWhereUniqueInput
}

/**
 * UserSession deleteMany
 */
export type UserSessionDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which UserSessions to delete
   */
  where?: Prisma.UserSessionWhereInput
  /**
   * Limit how many UserSessions to delete.
   */
  limit?: number
}

/**
 * UserSession without action
 */
export type UserSessionDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserSession
   */
  select?: Prisma.UserSessionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserSession
   */
  omit?: Prisma.UserSessionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserSessionInclude<ExtArgs> | null
}
