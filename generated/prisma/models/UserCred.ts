
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `UserCred` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model UserCred
 * 
 */
export type UserCredModel = runtime.Types.Result.DefaultSelection<Prisma.$UserCredPayload>

export type AggregateUserCred = {
  _count: UserCredCountAggregateOutputType | null
  _avg: UserCredAvgAggregateOutputType | null
  _sum: UserCredSumAggregateOutputType | null
  _min: UserCredMinAggregateOutputType | null
  _max: UserCredMaxAggregateOutputType | null
}

export type UserCredAvgAggregateOutputType = {
  id: number | null
}

export type UserCredSumAggregateOutputType = {
  id: number | null
}

export type UserCredMinAggregateOutputType = {
  id: number | null
  email: string | null
  password: string | null
  token: string | null
  name: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type UserCredMaxAggregateOutputType = {
  id: number | null
  email: string | null
  password: string | null
  token: string | null
  name: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type UserCredCountAggregateOutputType = {
  id: number
  email: number
  password: number
  token: number
  name: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type UserCredAvgAggregateInputType = {
  id?: true
}

export type UserCredSumAggregateInputType = {
  id?: true
}

export type UserCredMinAggregateInputType = {
  id?: true
  email?: true
  password?: true
  token?: true
  name?: true
  createdAt?: true
  updatedAt?: true
}

export type UserCredMaxAggregateInputType = {
  id?: true
  email?: true
  password?: true
  token?: true
  name?: true
  createdAt?: true
  updatedAt?: true
}

export type UserCredCountAggregateInputType = {
  id?: true
  email?: true
  password?: true
  token?: true
  name?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type UserCredAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which UserCred to aggregate.
   */
  where?: Prisma.UserCredWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of UserCreds to fetch.
   */
  orderBy?: Prisma.UserCredOrderByWithRelationInput | Prisma.UserCredOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.UserCredWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` UserCreds from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` UserCreds.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned UserCreds
  **/
  _count?: true | UserCredCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: UserCredAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: UserCredSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: UserCredMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: UserCredMaxAggregateInputType
}

export type GetUserCredAggregateType<T extends UserCredAggregateArgs> = {
      [P in keyof T & keyof AggregateUserCred]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateUserCred[P]>
    : Prisma.GetScalarType<T[P], AggregateUserCred[P]>
}




export type UserCredGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.UserCredWhereInput
  orderBy?: Prisma.UserCredOrderByWithAggregationInput | Prisma.UserCredOrderByWithAggregationInput[]
  by: Prisma.UserCredScalarFieldEnum[] | Prisma.UserCredScalarFieldEnum
  having?: Prisma.UserCredScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: UserCredCountAggregateInputType | true
  _avg?: UserCredAvgAggregateInputType
  _sum?: UserCredSumAggregateInputType
  _min?: UserCredMinAggregateInputType
  _max?: UserCredMaxAggregateInputType
}

export type UserCredGroupByOutputType = {
  id: number
  email: string
  password: string
  token: string
  name: string
  createdAt: Date
  updatedAt: Date
  _count: UserCredCountAggregateOutputType | null
  _avg: UserCredAvgAggregateOutputType | null
  _sum: UserCredSumAggregateOutputType | null
  _min: UserCredMinAggregateOutputType | null
  _max: UserCredMaxAggregateOutputType | null
}

type GetUserCredGroupByPayload<T extends UserCredGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<UserCredGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof UserCredGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], UserCredGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], UserCredGroupByOutputType[P]>
      }
    >
  >



export type UserCredWhereInput = {
  AND?: Prisma.UserCredWhereInput | Prisma.UserCredWhereInput[]
  OR?: Prisma.UserCredWhereInput[]
  NOT?: Prisma.UserCredWhereInput | Prisma.UserCredWhereInput[]
  id?: Prisma.IntFilter<"UserCred"> | number
  email?: Prisma.StringFilter<"UserCred"> | string
  password?: Prisma.StringFilter<"UserCred"> | string
  token?: Prisma.StringFilter<"UserCred"> | string
  name?: Prisma.StringFilter<"UserCred"> | string
  createdAt?: Prisma.DateTimeFilter<"UserCred"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"UserCred"> | Date | string
  UserFav?: Prisma.UserFavListRelationFilter
  UserSession?: Prisma.UserSessionListRelationFilter
}

export type UserCredOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  email?: Prisma.SortOrder
  password?: Prisma.SortOrder
  token?: Prisma.SortOrder
  name?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  UserFav?: Prisma.UserFavOrderByRelationAggregateInput
  UserSession?: Prisma.UserSessionOrderByRelationAggregateInput
  _relevance?: Prisma.UserCredOrderByRelevanceInput
}

export type UserCredWhereUniqueInput = Prisma.AtLeast<{
  id?: number
  email?: string
  token?: string
  AND?: Prisma.UserCredWhereInput | Prisma.UserCredWhereInput[]
  OR?: Prisma.UserCredWhereInput[]
  NOT?: Prisma.UserCredWhereInput | Prisma.UserCredWhereInput[]
  password?: Prisma.StringFilter<"UserCred"> | string
  name?: Prisma.StringFilter<"UserCred"> | string
  createdAt?: Prisma.DateTimeFilter<"UserCred"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"UserCred"> | Date | string
  UserFav?: Prisma.UserFavListRelationFilter
  UserSession?: Prisma.UserSessionListRelationFilter
}, "id" | "email" | "token">

export type UserCredOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  email?: Prisma.SortOrder
  password?: Prisma.SortOrder
  token?: Prisma.SortOrder
  name?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.UserCredCountOrderByAggregateInput
  _avg?: Prisma.UserCredAvgOrderByAggregateInput
  _max?: Prisma.UserCredMaxOrderByAggregateInput
  _min?: Prisma.UserCredMinOrderByAggregateInput
  _sum?: Prisma.UserCredSumOrderByAggregateInput
}

export type UserCredScalarWhereWithAggregatesInput = {
  AND?: Prisma.UserCredScalarWhereWithAggregatesInput | Prisma.UserCredScalarWhereWithAggregatesInput[]
  OR?: Prisma.UserCredScalarWhereWithAggregatesInput[]
  NOT?: Prisma.UserCredScalarWhereWithAggregatesInput | Prisma.UserCredScalarWhereWithAggregatesInput[]
  id?: Prisma.IntWithAggregatesFilter<"UserCred"> | number
  email?: Prisma.StringWithAggregatesFilter<"UserCred"> | string
  password?: Prisma.StringWithAggregatesFilter<"UserCred"> | string
  token?: Prisma.StringWithAggregatesFilter<"UserCred"> | string
  name?: Prisma.StringWithAggregatesFilter<"UserCred"> | string
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"UserCred"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"UserCred"> | Date | string
}

export type UserCredCreateInput = {
  email: string
  password: string
  token: string
  name: string
  createdAt?: Date | string
  updatedAt?: Date | string
  UserFav?: Prisma.UserFavCreateNestedManyWithoutUserInput
  UserSession?: Prisma.UserSessionCreateNestedManyWithoutUserInput
}

export type UserCredUncheckedCreateInput = {
  id?: number
  email: string
  password: string
  token: string
  name: string
  createdAt?: Date | string
  updatedAt?: Date | string
  UserFav?: Prisma.UserFavUncheckedCreateNestedManyWithoutUserInput
  UserSession?: Prisma.UserSessionUncheckedCreateNestedManyWithoutUserInput
}

export type UserCredUpdateInput = {
  email?: Prisma.StringFieldUpdateOperationsInput | string
  password?: Prisma.StringFieldUpdateOperationsInput | string
  token?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  UserFav?: Prisma.UserFavUpdateManyWithoutUserNestedInput
  UserSession?: Prisma.UserSessionUpdateManyWithoutUserNestedInput
}

export type UserCredUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  email?: Prisma.StringFieldUpdateOperationsInput | string
  password?: Prisma.StringFieldUpdateOperationsInput | string
  token?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  UserFav?: Prisma.UserFavUncheckedUpdateManyWithoutUserNestedInput
  UserSession?: Prisma.UserSessionUncheckedUpdateManyWithoutUserNestedInput
}

export type UserCredCreateManyInput = {
  id?: number
  email: string
  password: string
  token: string
  name: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type UserCredUpdateManyMutationInput = {
  email?: Prisma.StringFieldUpdateOperationsInput | string
  password?: Prisma.StringFieldUpdateOperationsInput | string
  token?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type UserCredUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  email?: Prisma.StringFieldUpdateOperationsInput | string
  password?: Prisma.StringFieldUpdateOperationsInput | string
  token?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type UserCredOrderByRelevanceInput = {
  fields: Prisma.UserCredOrderByRelevanceFieldEnum | Prisma.UserCredOrderByRelevanceFieldEnum[]
  sort: Prisma.SortOrder
  search: string
}

export type UserCredCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  email?: Prisma.SortOrder
  password?: Prisma.SortOrder
  token?: Prisma.SortOrder
  name?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type UserCredAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder
}

export type UserCredMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  email?: Prisma.SortOrder
  password?: Prisma.SortOrder
  token?: Prisma.SortOrder
  name?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type UserCredMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  email?: Prisma.SortOrder
  password?: Prisma.SortOrder
  token?: Prisma.SortOrder
  name?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type UserCredSumOrderByAggregateInput = {
  id?: Prisma.SortOrder
}

export type UserCredScalarRelationFilter = {
  is?: Prisma.UserCredWhereInput
  isNot?: Prisma.UserCredWhereInput
}

export type StringFieldUpdateOperationsInput = {
  set?: string
}

export type DateTimeFieldUpdateOperationsInput = {
  set?: Date | string
}

export type IntFieldUpdateOperationsInput = {
  set?: number
  increment?: number
  decrement?: number
  multiply?: number
  divide?: number
}

export type UserCredCreateNestedOneWithoutUserSessionInput = {
  create?: Prisma.XOR<Prisma.UserCredCreateWithoutUserSessionInput, Prisma.UserCredUncheckedCreateWithoutUserSessionInput>
  connectOrCreate?: Prisma.UserCredCreateOrConnectWithoutUserSessionInput
  connect?: Prisma.UserCredWhereUniqueInput
}

export type UserCredUpdateOneRequiredWithoutUserSessionNestedInput = {
  create?: Prisma.XOR<Prisma.UserCredCreateWithoutUserSessionInput, Prisma.UserCredUncheckedCreateWithoutUserSessionInput>
  connectOrCreate?: Prisma.UserCredCreateOrConnectWithoutUserSessionInput
  upsert?: Prisma.UserCredUpsertWithoutUserSessionInput
  connect?: Prisma.UserCredWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.UserCredUpdateToOneWithWhereWithoutUserSessionInput, Prisma.UserCredUpdateWithoutUserSessionInput>, Prisma.UserCredUncheckedUpdateWithoutUserSessionInput>
}

export type UserCredCreateNestedOneWithoutUserFavInput = {
  create?: Prisma.XOR<Prisma.UserCredCreateWithoutUserFavInput, Prisma.UserCredUncheckedCreateWithoutUserFavInput>
  connectOrCreate?: Prisma.UserCredCreateOrConnectWithoutUserFavInput
  connect?: Prisma.UserCredWhereUniqueInput
}

export type UserCredUpdateOneRequiredWithoutUserFavNestedInput = {
  create?: Prisma.XOR<Prisma.UserCredCreateWithoutUserFavInput, Prisma.UserCredUncheckedCreateWithoutUserFavInput>
  connectOrCreate?: Prisma.UserCredCreateOrConnectWithoutUserFavInput
  upsert?: Prisma.UserCredUpsertWithoutUserFavInput
  connect?: Prisma.UserCredWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.UserCredUpdateToOneWithWhereWithoutUserFavInput, Prisma.UserCredUpdateWithoutUserFavInput>, Prisma.UserCredUncheckedUpdateWithoutUserFavInput>
}

export type UserCredCreateWithoutUserSessionInput = {
  email: string
  password: string
  token: string
  name: string
  createdAt?: Date | string
  updatedAt?: Date | string
  UserFav?: Prisma.UserFavCreateNestedManyWithoutUserInput
}

export type UserCredUncheckedCreateWithoutUserSessionInput = {
  id?: number
  email: string
  password: string
  token: string
  name: string
  createdAt?: Date | string
  updatedAt?: Date | string
  UserFav?: Prisma.UserFavUncheckedCreateNestedManyWithoutUserInput
}

export type UserCredCreateOrConnectWithoutUserSessionInput = {
  where: Prisma.UserCredWhereUniqueInput
  create: Prisma.XOR<Prisma.UserCredCreateWithoutUserSessionInput, Prisma.UserCredUncheckedCreateWithoutUserSessionInput>
}

export type UserCredUpsertWithoutUserSessionInput = {
  update: Prisma.XOR<Prisma.UserCredUpdateWithoutUserSessionInput, Prisma.UserCredUncheckedUpdateWithoutUserSessionInput>
  create: Prisma.XOR<Prisma.UserCredCreateWithoutUserSessionInput, Prisma.UserCredUncheckedCreateWithoutUserSessionInput>
  where?: Prisma.UserCredWhereInput
}

export type UserCredUpdateToOneWithWhereWithoutUserSessionInput = {
  where?: Prisma.UserCredWhereInput
  data: Prisma.XOR<Prisma.UserCredUpdateWithoutUserSessionInput, Prisma.UserCredUncheckedUpdateWithoutUserSessionInput>
}

export type UserCredUpdateWithoutUserSessionInput = {
  email?: Prisma.StringFieldUpdateOperationsInput | string
  password?: Prisma.StringFieldUpdateOperationsInput | string
  token?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  UserFav?: Prisma.UserFavUpdateManyWithoutUserNestedInput
}

export type UserCredUncheckedUpdateWithoutUserSessionInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  email?: Prisma.StringFieldUpdateOperationsInput | string
  password?: Prisma.StringFieldUpdateOperationsInput | string
  token?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  UserFav?: Prisma.UserFavUncheckedUpdateManyWithoutUserNestedInput
}

export type UserCredCreateWithoutUserFavInput = {
  email: string
  password: string
  token: string
  name: string
  createdAt?: Date | string
  updatedAt?: Date | string
  UserSession?: Prisma.UserSessionCreateNestedManyWithoutUserInput
}

export type UserCredUncheckedCreateWithoutUserFavInput = {
  id?: number
  email: string
  password: string
  token: string
  name: string
  createdAt?: Date | string
  updatedAt?: Date | string
  UserSession?: Prisma.UserSessionUncheckedCreateNestedManyWithoutUserInput
}

export type UserCredCreateOrConnectWithoutUserFavInput = {
  where: Prisma.UserCredWhereUniqueInput
  create: Prisma.XOR<Prisma.UserCredCreateWithoutUserFavInput, Prisma.UserCredUncheckedCreateWithoutUserFavInput>
}

export type UserCredUpsertWithoutUserFavInput = {
  update: Prisma.XOR<Prisma.UserCredUpdateWithoutUserFavInput, Prisma.UserCredUncheckedUpdateWithoutUserFavInput>
  create: Prisma.XOR<Prisma.UserCredCreateWithoutUserFavInput, Prisma.UserCredUncheckedCreateWithoutUserFavInput>
  where?: Prisma.UserCredWhereInput
}

export type UserCredUpdateToOneWithWhereWithoutUserFavInput = {
  where?: Prisma.UserCredWhereInput
  data: Prisma.XOR<Prisma.UserCredUpdateWithoutUserFavInput, Prisma.UserCredUncheckedUpdateWithoutUserFavInput>
}

export type UserCredUpdateWithoutUserFavInput = {
  email?: Prisma.StringFieldUpdateOperationsInput | string
  password?: Prisma.StringFieldUpdateOperationsInput | string
  token?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  UserSession?: Prisma.UserSessionUpdateManyWithoutUserNestedInput
}

export type UserCredUncheckedUpdateWithoutUserFavInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  email?: Prisma.StringFieldUpdateOperationsInput | string
  password?: Prisma.StringFieldUpdateOperationsInput | string
  token?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  UserSession?: Prisma.UserSessionUncheckedUpdateManyWithoutUserNestedInput
}


/**
 * Count Type UserCredCountOutputType
 */

export type UserCredCountOutputType = {
  UserFav: number
  UserSession: number
}

export type UserCredCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  UserFav?: boolean | UserCredCountOutputTypeCountUserFavArgs
  UserSession?: boolean | UserCredCountOutputTypeCountUserSessionArgs
}

/**
 * UserCredCountOutputType without action
 */
export type UserCredCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserCredCountOutputType
   */
  select?: Prisma.UserCredCountOutputTypeSelect<ExtArgs> | null
}

/**
 * UserCredCountOutputType without action
 */
export type UserCredCountOutputTypeCountUserFavArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.UserFavWhereInput
}

/**
 * UserCredCountOutputType without action
 */
export type UserCredCountOutputTypeCountUserSessionArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.UserSessionWhereInput
}


export type UserCredSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  email?: boolean
  password?: boolean
  token?: boolean
  name?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  UserFav?: boolean | Prisma.UserCred$UserFavArgs<ExtArgs>
  UserSession?: boolean | Prisma.UserCred$UserSessionArgs<ExtArgs>
  _count?: boolean | Prisma.UserCredCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["userCred"]>



export type UserCredSelectScalar = {
  id?: boolean
  email?: boolean
  password?: boolean
  token?: boolean
  name?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type UserCredOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "email" | "password" | "token" | "name" | "createdAt" | "updatedAt", ExtArgs["result"]["userCred"]>
export type UserCredInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  UserFav?: boolean | Prisma.UserCred$UserFavArgs<ExtArgs>
  UserSession?: boolean | Prisma.UserCred$UserSessionArgs<ExtArgs>
  _count?: boolean | Prisma.UserCredCountOutputTypeDefaultArgs<ExtArgs>
}

export type $UserCredPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "UserCred"
  objects: {
    UserFav: Prisma.$UserFavPayload<ExtArgs>[]
    UserSession: Prisma.$UserSessionPayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: number
    email: string
    password: string
    token: string
    name: string
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["userCred"]>
  composites: {}
}

export type UserCredGetPayload<S extends boolean | null | undefined | UserCredDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$UserCredPayload, S>

export type UserCredCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<UserCredFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: UserCredCountAggregateInputType | true
  }

export interface UserCredDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UserCred'], meta: { name: 'UserCred' } }
  /**
   * Find zero or one UserCred that matches the filter.
   * @param {UserCredFindUniqueArgs} args - Arguments to find a UserCred
   * @example
   * // Get one UserCred
   * const userCred = await prisma.userCred.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends UserCredFindUniqueArgs>(args: Prisma.SelectSubset<T, UserCredFindUniqueArgs<ExtArgs>>): Prisma.Prisma__UserCredClient<runtime.Types.Result.GetResult<Prisma.$UserCredPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one UserCred that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {UserCredFindUniqueOrThrowArgs} args - Arguments to find a UserCred
   * @example
   * // Get one UserCred
   * const userCred = await prisma.userCred.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends UserCredFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, UserCredFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__UserCredClient<runtime.Types.Result.GetResult<Prisma.$UserCredPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first UserCred that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserCredFindFirstArgs} args - Arguments to find a UserCred
   * @example
   * // Get one UserCred
   * const userCred = await prisma.userCred.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends UserCredFindFirstArgs>(args?: Prisma.SelectSubset<T, UserCredFindFirstArgs<ExtArgs>>): Prisma.Prisma__UserCredClient<runtime.Types.Result.GetResult<Prisma.$UserCredPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first UserCred that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserCredFindFirstOrThrowArgs} args - Arguments to find a UserCred
   * @example
   * // Get one UserCred
   * const userCred = await prisma.userCred.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends UserCredFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, UserCredFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__UserCredClient<runtime.Types.Result.GetResult<Prisma.$UserCredPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more UserCreds that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserCredFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all UserCreds
   * const userCreds = await prisma.userCred.findMany()
   * 
   * // Get first 10 UserCreds
   * const userCreds = await prisma.userCred.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const userCredWithIdOnly = await prisma.userCred.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends UserCredFindManyArgs>(args?: Prisma.SelectSubset<T, UserCredFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$UserCredPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a UserCred.
   * @param {UserCredCreateArgs} args - Arguments to create a UserCred.
   * @example
   * // Create one UserCred
   * const UserCred = await prisma.userCred.create({
   *   data: {
   *     // ... data to create a UserCred
   *   }
   * })
   * 
   */
  create<T extends UserCredCreateArgs>(args: Prisma.SelectSubset<T, UserCredCreateArgs<ExtArgs>>): Prisma.Prisma__UserCredClient<runtime.Types.Result.GetResult<Prisma.$UserCredPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many UserCreds.
   * @param {UserCredCreateManyArgs} args - Arguments to create many UserCreds.
   * @example
   * // Create many UserCreds
   * const userCred = await prisma.userCred.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends UserCredCreateManyArgs>(args?: Prisma.SelectSubset<T, UserCredCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Delete a UserCred.
   * @param {UserCredDeleteArgs} args - Arguments to delete one UserCred.
   * @example
   * // Delete one UserCred
   * const UserCred = await prisma.userCred.delete({
   *   where: {
   *     // ... filter to delete one UserCred
   *   }
   * })
   * 
   */
  delete<T extends UserCredDeleteArgs>(args: Prisma.SelectSubset<T, UserCredDeleteArgs<ExtArgs>>): Prisma.Prisma__UserCredClient<runtime.Types.Result.GetResult<Prisma.$UserCredPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one UserCred.
   * @param {UserCredUpdateArgs} args - Arguments to update one UserCred.
   * @example
   * // Update one UserCred
   * const userCred = await prisma.userCred.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends UserCredUpdateArgs>(args: Prisma.SelectSubset<T, UserCredUpdateArgs<ExtArgs>>): Prisma.Prisma__UserCredClient<runtime.Types.Result.GetResult<Prisma.$UserCredPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more UserCreds.
   * @param {UserCredDeleteManyArgs} args - Arguments to filter UserCreds to delete.
   * @example
   * // Delete a few UserCreds
   * const { count } = await prisma.userCred.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends UserCredDeleteManyArgs>(args?: Prisma.SelectSubset<T, UserCredDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more UserCreds.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserCredUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many UserCreds
   * const userCred = await prisma.userCred.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends UserCredUpdateManyArgs>(args: Prisma.SelectSubset<T, UserCredUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create or update one UserCred.
   * @param {UserCredUpsertArgs} args - Arguments to update or create a UserCred.
   * @example
   * // Update or create a UserCred
   * const userCred = await prisma.userCred.upsert({
   *   create: {
   *     // ... data to create a UserCred
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the UserCred we want to update
   *   }
   * })
   */
  upsert<T extends UserCredUpsertArgs>(args: Prisma.SelectSubset<T, UserCredUpsertArgs<ExtArgs>>): Prisma.Prisma__UserCredClient<runtime.Types.Result.GetResult<Prisma.$UserCredPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of UserCreds.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserCredCountArgs} args - Arguments to filter UserCreds to count.
   * @example
   * // Count the number of UserCreds
   * const count = await prisma.userCred.count({
   *   where: {
   *     // ... the filter for the UserCreds we want to count
   *   }
   * })
  **/
  count<T extends UserCredCountArgs>(
    args?: Prisma.Subset<T, UserCredCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], UserCredCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a UserCred.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserCredAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends UserCredAggregateArgs>(args: Prisma.Subset<T, UserCredAggregateArgs>): Prisma.PrismaPromise<GetUserCredAggregateType<T>>

  /**
   * Group by UserCred.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserCredGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends UserCredGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: UserCredGroupByArgs['orderBy'] }
      : { orderBy?: UserCredGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, UserCredGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserCredGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the UserCred model
 */
readonly fields: UserCredFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for UserCred.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__UserCredClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  UserFav<T extends Prisma.UserCred$UserFavArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.UserCred$UserFavArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$UserFavPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  UserSession<T extends Prisma.UserCred$UserSessionArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.UserCred$UserSessionArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$UserSessionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the UserCred model
 */
export interface UserCredFieldRefs {
  readonly id: Prisma.FieldRef<"UserCred", 'Int'>
  readonly email: Prisma.FieldRef<"UserCred", 'String'>
  readonly password: Prisma.FieldRef<"UserCred", 'String'>
  readonly token: Prisma.FieldRef<"UserCred", 'String'>
  readonly name: Prisma.FieldRef<"UserCred", 'String'>
  readonly createdAt: Prisma.FieldRef<"UserCred", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"UserCred", 'DateTime'>
}
    

// Custom InputTypes
/**
 * UserCred findUnique
 */
export type UserCredFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserCred
   */
  select?: Prisma.UserCredSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserCred
   */
  omit?: Prisma.UserCredOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserCredInclude<ExtArgs> | null
  /**
   * Filter, which UserCred to fetch.
   */
  where: Prisma.UserCredWhereUniqueInput
}

/**
 * UserCred findUniqueOrThrow
 */
export type UserCredFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserCred
   */
  select?: Prisma.UserCredSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserCred
   */
  omit?: Prisma.UserCredOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserCredInclude<ExtArgs> | null
  /**
   * Filter, which UserCred to fetch.
   */
  where: Prisma.UserCredWhereUniqueInput
}

/**
 * UserCred findFirst
 */
export type UserCredFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserCred
   */
  select?: Prisma.UserCredSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserCred
   */
  omit?: Prisma.UserCredOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserCredInclude<ExtArgs> | null
  /**
   * Filter, which UserCred to fetch.
   */
  where?: Prisma.UserCredWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of UserCreds to fetch.
   */
  orderBy?: Prisma.UserCredOrderByWithRelationInput | Prisma.UserCredOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for UserCreds.
   */
  cursor?: Prisma.UserCredWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` UserCreds from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` UserCreds.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of UserCreds.
   */
  distinct?: Prisma.UserCredScalarFieldEnum | Prisma.UserCredScalarFieldEnum[]
}

/**
 * UserCred findFirstOrThrow
 */
export type UserCredFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserCred
   */
  select?: Prisma.UserCredSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserCred
   */
  omit?: Prisma.UserCredOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserCredInclude<ExtArgs> | null
  /**
   * Filter, which UserCred to fetch.
   */
  where?: Prisma.UserCredWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of UserCreds to fetch.
   */
  orderBy?: Prisma.UserCredOrderByWithRelationInput | Prisma.UserCredOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for UserCreds.
   */
  cursor?: Prisma.UserCredWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` UserCreds from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` UserCreds.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of UserCreds.
   */
  distinct?: Prisma.UserCredScalarFieldEnum | Prisma.UserCredScalarFieldEnum[]
}

/**
 * UserCred findMany
 */
export type UserCredFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserCred
   */
  select?: Prisma.UserCredSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserCred
   */
  omit?: Prisma.UserCredOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserCredInclude<ExtArgs> | null
  /**
   * Filter, which UserCreds to fetch.
   */
  where?: Prisma.UserCredWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of UserCreds to fetch.
   */
  orderBy?: Prisma.UserCredOrderByWithRelationInput | Prisma.UserCredOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing UserCreds.
   */
  cursor?: Prisma.UserCredWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` UserCreds from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` UserCreds.
   */
  skip?: number
  distinct?: Prisma.UserCredScalarFieldEnum | Prisma.UserCredScalarFieldEnum[]
}

/**
 * UserCred create
 */
export type UserCredCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserCred
   */
  select?: Prisma.UserCredSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserCred
   */
  omit?: Prisma.UserCredOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserCredInclude<ExtArgs> | null
  /**
   * The data needed to create a UserCred.
   */
  data: Prisma.XOR<Prisma.UserCredCreateInput, Prisma.UserCredUncheckedCreateInput>
}

/**
 * UserCred createMany
 */
export type UserCredCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many UserCreds.
   */
  data: Prisma.UserCredCreateManyInput | Prisma.UserCredCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * UserCred update
 */
export type UserCredUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserCred
   */
  select?: Prisma.UserCredSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserCred
   */
  omit?: Prisma.UserCredOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserCredInclude<ExtArgs> | null
  /**
   * The data needed to update a UserCred.
   */
  data: Prisma.XOR<Prisma.UserCredUpdateInput, Prisma.UserCredUncheckedUpdateInput>
  /**
   * Choose, which UserCred to update.
   */
  where: Prisma.UserCredWhereUniqueInput
}

/**
 * UserCred updateMany
 */
export type UserCredUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update UserCreds.
   */
  data: Prisma.XOR<Prisma.UserCredUpdateManyMutationInput, Prisma.UserCredUncheckedUpdateManyInput>
  /**
   * Filter which UserCreds to update
   */
  where?: Prisma.UserCredWhereInput
  /**
   * Limit how many UserCreds to update.
   */
  limit?: number
}

/**
 * UserCred upsert
 */
export type UserCredUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserCred
   */
  select?: Prisma.UserCredSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserCred
   */
  omit?: Prisma.UserCredOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserCredInclude<ExtArgs> | null
  /**
   * The filter to search for the UserCred to update in case it exists.
   */
  where: Prisma.UserCredWhereUniqueInput
  /**
   * In case the UserCred found by the `where` argument doesn't exist, create a new UserCred with this data.
   */
  create: Prisma.XOR<Prisma.UserCredCreateInput, Prisma.UserCredUncheckedCreateInput>
  /**
   * In case the UserCred was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.UserCredUpdateInput, Prisma.UserCredUncheckedUpdateInput>
}

/**
 * UserCred delete
 */
export type UserCredDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserCred
   */
  select?: Prisma.UserCredSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserCred
   */
  omit?: Prisma.UserCredOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserCredInclude<ExtArgs> | null
  /**
   * Filter which UserCred to delete.
   */
  where: Prisma.UserCredWhereUniqueInput
}

/**
 * UserCred deleteMany
 */
export type UserCredDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which UserCreds to delete
   */
  where?: Prisma.UserCredWhereInput
  /**
   * Limit how many UserCreds to delete.
   */
  limit?: number
}

/**
 * UserCred.UserFav
 */
export type UserCred$UserFavArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserFav
   */
  select?: Prisma.UserFavSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserFav
   */
  omit?: Prisma.UserFavOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserFavInclude<ExtArgs> | null
  where?: Prisma.UserFavWhereInput
  orderBy?: Prisma.UserFavOrderByWithRelationInput | Prisma.UserFavOrderByWithRelationInput[]
  cursor?: Prisma.UserFavWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.UserFavScalarFieldEnum | Prisma.UserFavScalarFieldEnum[]
}

/**
 * UserCred.UserSession
 */
export type UserCred$UserSessionArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserSession
   */
  select?: Prisma.UserSessionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserSession
   */
  omit?: Prisma.UserSessionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserSessionInclude<ExtArgs> | null
  where?: Prisma.UserSessionWhereInput
  orderBy?: Prisma.UserSessionOrderByWithRelationInput | Prisma.UserSessionOrderByWithRelationInput[]
  cursor?: Prisma.UserSessionWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.UserSessionScalarFieldEnum | Prisma.UserSessionScalarFieldEnum[]
}

/**
 * UserCred without action
 */
export type UserCredDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserCred
   */
  select?: Prisma.UserCredSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserCred
   */
  omit?: Prisma.UserCredOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserCredInclude<ExtArgs> | null
}
